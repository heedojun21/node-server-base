{
  "_args": [
    [
      {
        "raw": "path-parser@^2.0.2",
        "scope": null,
        "escapedName": "path-parser",
        "name": "path-parser",
        "rawSpec": "^2.0.2",
        "spec": ">=2.0.2 <3.0.0",
        "type": "range"
      },
      "/Users/heedojun/workspace/NodeProjects/node-server-base"
    ]
  ],
  "_from": "path-parser@>=2.0.2 <3.0.0",
  "_id": "path-parser@2.1.0",
  "_inCache": true,
  "_location": "/path-parser",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/path-parser-2.1.0.tgz_1510132448876_0.18380204495042562"
  },
  "_npmUser": {
    "name": "troch",
    "email": "thomas.c.roch@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "path-parser@^2.0.2",
    "scope": null,
    "escapedName": "path-parser",
    "name": "path-parser",
    "rawSpec": "^2.0.2",
    "spec": ">=2.0.2 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/path-parser/-/path-parser-2.1.0.tgz",
  "_shasum": "bf7b9335ea59ef0add7145faf6807dafb995a696",
  "_shrinkwrap": null,
  "_spec": "path-parser@^2.0.2",
  "_where": "/Users/heedojun/workspace/NodeProjects/node-server-base",
  "author": {
    "name": "Thomas Roch"
  },
  "bugs": {
    "url": "https://github.com/troch/path-parser/issues"
  },
  "dependencies": {
    "search-params": "~1.3.0"
  },
  "description": "A small utility to parse, match and generate paths",
  "devDependencies": {
    "babel-core": "~6.26.0",
    "babel-eslint": "~8.0.2",
    "babel-plugin-add-module-exports": "~0.2.1",
    "babel-plugin-transform-class-properties": "~6.24.1",
    "babel-plugin-transform-export-extensions": "~6.22.0",
    "babel-plugin-transform-object-rest-spread": "~6.26.0",
    "babel-preset-env": "~1.6.1",
    "babel-preset-es2015-rollup": "~3.0.0",
    "conventional-changelog": "~1.1.6",
    "coveralls": "~3.0.0",
    "eslint": "~4.10.0",
    "isparta": "~4.0.0",
    "mkdirp": "~0.5.1",
    "mocha": "~4.0.1",
    "rimraf": "~2.6.2",
    "rollup": "~0.51.0",
    "rollup-plugin-babel": "~3.0.2",
    "should": "~13.1.3",
    "yargs": "~10.0.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-TsRl66CLwA7QVQW2G0vvpTAce7Ppf+ATZsbJE7wDQBUoIRbCYiK/v09sj+xVR+tLFeB4dT1da/71Y7qfbQvWwg==",
    "shasum": "bf7b9335ea59ef0add7145faf6807dafb995a696",
    "tarball": "https://registry.npmjs.org/path-parser/-/path-parser-2.1.0.tgz"
  },
  "gitHead": "e14e1744df0b8d70aafabe3cd32b3a863c067dc2",
  "homepage": "https://github.com/troch/path-parser",
  "jsnext:main": "modules/Path.js",
  "keywords": [
    "path",
    "parser",
    "url",
    "route",
    "match",
    "partial match",
    "regex"
  ],
  "license": "ISC",
  "main": "dist/commonjs/path-parser.js",
  "maintainers": [
    {
      "name": "troch",
      "email": "thomas.c.roch@gmail.com"
    }
  ],
  "name": "path-parser",
  "optionalDependencies": {},
  "readme": "[![npm version](https://badge.fury.io/js/path-parser.svg)](http://badge.fury.io/js/path-parser)\n[![Build Status](https://travis-ci.org/troch/path-parser.svg)](https://travis-ci.org/troch/path-parser)\n[![Coverage Status](https://coveralls.io/repos/troch/path-parser/badge.svg?branch=master)](https://coveralls.io/r/troch/path-parser?branch=master)\n\n# path-parser\n\nA small utility to parse and build paths. It can be used to partially or fully\ntest paths against a defined pattern.\n\nPartial testing allows to determine if a given path starts with the defined pattern.\nIt is used by [route-node](https://github.com/troch/route-node)\n\n## Usage\n\n```javascript\nimport Path from 'path-parser';\n// Defining a new path\nconst p = new Path('/users/profile/:id');\n// Matching\np.test('/users/profile/00123')               // => {id: \"00123\"}\n// Partial testing: does this path\n// starts with that pattern?\np.partialTest('/users/profile/00123/orders') // => {id: \"00123\"}\np.partialTest('/profile/00123/orders')       // => null\n// Building\np.build({id: '00123'})                       // => \"users/profile/00123\"\n```\n\nWithout `new`:\n\n```javascript\nimport Path from 'path-parser';\n\nconst p = Path.createPath('/users/profile/:id');\n```\n\n## Defining parameters\n\n- `:param`: for URL parameters\n- `;param`: for matrix parameters\n- `*splat`: for parameters spanning over multiple segments. Handle with care\n- `?param1&param2` or `?:param1&:param2`: for query parameters. Colons `:` are optional.\n- `?param1=a&param1=b` will result in `{param1: ['a', 'b']}`\n- `?param1[]=a` and `?param1[]=a&param1[]=b` will result respectively in `{param1: ['a']}` and `{param1: ['a', 'b']}`\n\n## Parameter constraints\n\nFor URL parameters and matrix parameters, you can add a constraint in the form of a regular expression.\nNote that back slashes have to be escaped.\n\n- `:param<\\\\d+>` will match numbers only for parameter `param`\n- `;id<[a-fA-F0-9]{8}` will match 8 characters hexadecimal strings for parameter `id`\n\nConstraints are also applied when building paths, unless specified otherwise (set option flag `ignoreConstraints` to true).\n\n```javascript\n// Path.build(params, opts)\nvar Path = new Path('/users/profile/:id<\\d+>');\n\npath.build({id: 'not-a-number'});       // => Will throw an error\npath.build({id: 'not-a-number'}, {ignoreConstraints: true}); // => '/users/profile/not-a-number'\n```\n\n## Optional trailing slashes\n\n`.test(path, options)` accepts an option object:\n- `trailingSlash`: if truthy, it will make trailing slashes optional (default to `true`).\n\n```javascript\nvar path = new Path('/my-path');\n\npath.test('/my-path/')       // => null\npath.test('/my-path/', { trailingSlash: true }) // => {}\n```\n\n## Partial test with delimiters\n\n`.partialTest(path, options)` accepts an option object:\n- `delimited`: if truthy, a partial test will only be successful if a delimiter is found at the end of a match (default to `true`, delimiters are `/`, `?`, `.` and `;`).\n\n```javascript\nvar path = new Path('/my-path');\n\npath.partialTest('/my-path/extended')       // => {}\npath.partialTest('/my-path-extended')       // => null\npath.partialTest('/my-path-extended', { delimited: false }) // => {}\n```\n\n## Related modules\n\n- [route-parser](https://github.com/rcs/route-parser)\n- [url-pattern](https://github.com/snd/url-pattern)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/troch/path-parser.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:amd && npm run build:umd && npm run build:cjs",
    "build:amd": "BABEL_ENV=rollup rollup -c rollup.config.js --format amd",
    "build:cjs": "mkdirp dist/commonjs && babel modules/Path.js -o dist/commonjs/path-parser.js",
    "build:umd": "BABEL_ENV=rollup rollup -c rollup.config.js --format umd",
    "clean": "rimraf dist",
    "clog": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "lint": "eslint modules/*.js",
    "test": "mocha --compilers js:babel-core/register",
    "test-cover": "babel-node node_modules/.bin/isparta cover node_modules/.bin/_mocha"
  },
  "version": "2.1.0"
}
